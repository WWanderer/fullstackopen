{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["servUrl","axios","get","then","rsp","data","person","put","id","post","delete","Filter","setFilter","onChange","event","target","value","PersonForm","persons","setPersons","setNotification","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","newPerson","name","number","some","p","window","confirm","pers","find","dbService","map","catch","err","setTimeout","concat","finally","x","type","Person","onClick","res","filter","Persons","flt","toDisplay","toLowerCase","includes","console","log","key","Notification","message","style","color","fontStyle","fontSize","App","notification","useEffect","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5e5b9543.chunk.js","sourcesContent":["import axios from 'axios'\nconst servUrl = '/api/persons'\n\nconst getAll = () => {\n    const req = axios.get(servUrl)\n    return req.then(rsp => rsp.data)\n}\n\nconst create = (person) => {\n    const req = axios.post(servUrl, person)\n    return req.then(rsp => rsp.data)\n}\n\nconst update = (person) => {\n    const req = axios.put(`${servUrl}/${person.id}`, person)\n    return req.then(rsp => rsp.data)\n}\n\nconst del = (person) => {\n    const req = axios.delete(`${servUrl}/${person.id}`)\n    return req.then(rsp => rsp.data)\n}\n\nexport default { getAll, update, create, del }\n","import React from 'react'\n\nconst Filter = ({ setFilter }) => {\n    const filter = (event) => {\n        setFilter(event.target.value)\n    }\n    return (\n        <div>\n            search <input\n                onChange={filter}\n            />\n        </div>\n    )\n}\n\nexport default Filter","import React, { useState } from 'react'\nimport dbService from '../services/persons'\n\nconst PersonForm = ({ persons, setPersons, setNotification }) => {\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n\n    const handleNewName = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNewNumber = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const addPerson = (event) => {\n        event.preventDefault()\n\n        const newPerson = {\n            name: newName,\n            number: newNumber\n        }\n\n        if (persons.some((p => p.name === newPerson.name))) {\n            const result = window.confirm(`${newName} is already in the phonebook, would you like to replace this person's number?`)\n            if (result) {\n                const pers = persons.find(p => p.name === newPerson.name)\n                pers.number = newPerson.number\n                dbService.update(pers)\n                    .then(rsp => {\n                        // console.log(rsp)\n                        setPersons(persons.map(p => p.id === pers.id ? pers : p))\n                    })\n                    .catch(err => {\n                        setNotification(`${pers.name} was already removed from the database`)\n                        setTimeout(() => {\n                            setNotification(null)\n                        }, 2000);\n                    })\n            }\n        } else {\n            dbService\n                .create(newPerson)\n                .then(rsp => {\n                    // console.log(rsp)\n                    setPersons(persons.concat(rsp))\n                })\n                .finally(x => {\n                    setNotification(`${newPerson.name} was added to the database`)\n                    setTimeout(() => {\n                        setNotification(null)\n                    }, 2000);\n                })\n        }\n        setNewName('')\n        setNewNumber('')\n    }\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input\n                    onChange={handleNewName}\n                    value={newName}\n                />\n            </div>\n            <div>\n                number: <input\n                    type=\"tel\"\n                    onChange={handleNewNumber}\n                    value={newNumber}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\nimport dbService from '../services/persons'\n\nconst Person = ({ person, persons, setPersons }) => {\n    const delPerson = () => {\n        const result = window.confirm(`Delete person ${person.name}?`)\n        if (result) {\n            dbService.del(person).then(res => {\n                // console.log(res)\n                setPersons(persons.filter(p => p.id !== person.id))\n            })\n        }\n    }\n    return (\n        <div>{person.name} : {person.number} <button onClick={delPerson}>delete</button></div>\n    )\n}\n\nconst Persons = ({ persons, flt, setPersons }) => {\n    const toDisplay = persons.filter(p => p.name.toLowerCase().includes(flt))\n    console.log(toDisplay)\n    return (\n        toDisplay.map(p =>\n            <Person key={p.id} person={p} persons={persons} setPersons={setPersons}></Person>\n        )\n    )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({ message }) => {\n    const notificationStyleGood = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    const notificationStyleBad = {\n        color: 'red',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    if (message === null) {\n        return null\n    } else if (message.includes('removed')) {\n        return (\n            <div style={notificationStyleBad}>\n                {message}\n            </div>\n        )\n    }\n\n    return (\n        <div style={notificationStyleGood}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport dbService from './services/persons'\nimport Filter from './components/Filter.js'\nimport PersonForm from './components/PersonForm.js'\nimport Persons from './components/Persons.js'\nimport Notification from './components/Notification.js'\n\nconst App = () => {\n\tconst [persons, setPersons] = useState([])\n\tconst [filter, setFilter] = useState('')\n\tconst [notification, setNotification] = useState('')\n\n\tuseEffect(() => {\n\t\tdbService\n\t\t\t.getAll()\n\t\t\t.then(rsp => {\n\t\t\t\tsetPersons(rsp)\n\t\t\t})\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Phonebook</h2>\n\t\t\t<Filter\n\t\t\t\tsetFilter={setFilter}\n\t\t\t/>\n\t\t\t<Notification\n\t\t\t\tmessage={notification}\n\t\t\t/>\n\t\t\t<h2>Add person</h2>\n\t\t\t<PersonForm\n\t\t\t\tpersons={persons}\n\t\t\t\tsetPersons={setPersons}\n\t\t\t\tsetNotification={setNotification}\n\t\t\t/>\n\t\t\t<h2>Numbers</h2>\n\t\t\t<Persons\n\t\t\t\tpersons={persons}\n\t\t\t\tflt={filter}\n\t\t\t\tsetPersons={setPersons}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}